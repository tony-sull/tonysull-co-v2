---
import { Sprite } from 'astro-icon'
import navigation from '@data/navigation.json'
import site from '@data/site.json'

interface Props {
  pathname: string
}

const { pathname } = Astro.props as Props
const { main } = navigation

const isCurrentPage = (href: string) =>
  href === '/' ? pathname === href : pathname.startsWith(href)
---

<header class="container" role="banner">
  <div class="header">
    <a href="/" rel="home" aria-label="Go to Homepage">
      <svg
        aria-hidden
        viewBox="0 0 256 256"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <title>{site.title}</title>
        <circle cx="128" cy="128" r="128" fill="var(--chisel-secondary)"
        ></circle>
        <path
          d="M72.816 179V106.136H45.888V85.4H124.512V106.136H97.584V179H72.816ZM170.968 180.728C164.824 180.728 158.536 179.672 152.104 177.56C145.768 175.352 139.96 171.944 134.68 167.336L148.792 150.344C152.344 153.032 156.136 155.24 160.168 156.968C164.2 158.6 168.376 159.416 172.696 159.416C176.44 159.416 179.08 158.888 180.616 157.832C182.248 156.776 183.064 155.48 183.064 153.944C183.064 152.6 182.728 151.496 182.056 150.632C181.48 149.672 180.616 148.856 179.464 148.184C178.312 147.416 176.872 146.696 175.144 146.024C173.512 145.352 171.64 144.584 169.528 143.72L157.864 138.824C155.176 137.864 152.632 136.616 150.232 135.08C147.832 133.448 145.72 131.576 143.896 129.464C142.168 127.256 140.776 124.76 139.72 121.976C138.664 119.192 138.136 116.12 138.136 112.76C138.136 108.728 139 104.984 140.728 101.528C142.456 97.976 144.856 94.904 147.928 92.312C151.096 89.624 154.84 87.512 159.16 85.976C163.576 84.44 168.472 83.672 173.848 83.672C179.416 83.672 184.984 84.68 190.552 86.696C196.12 88.712 201.208 91.88 205.816 96.2L193.432 111.752C190.072 109.544 186.808 107.864 183.64 106.712C180.568 105.56 176.824 104.984 172.408 104.984C169.624 104.984 167.368 105.512 165.64 106.568C164.008 107.528 163.192 109.112 163.192 111.32C163.192 112.376 163.528 113.336 164.2 114.2C164.872 114.968 165.832 115.688 167.08 116.36C168.328 117.032 169.864 117.704 171.688 118.376C173.512 119.048 175.576 119.816 177.88 120.68L188.68 125.144C195.016 127.448 199.864 130.664 203.224 134.792C206.68 138.92 208.408 144.248 208.408 150.776C208.408 154.712 207.592 158.504 205.96 162.152C204.328 165.8 201.928 169.016 198.76 171.8C195.592 174.488 191.656 176.648 186.952 178.28C182.344 179.912 177.016 180.728 170.968 180.728Z"
          fill="var(--chisel-neutral-50)"></path>
      </svg>
      {site.title}
    </a>

    <input type="checkbox" id="menubtn" class="sr-only" />

    <nav>
      <ol>
        {
          main.map(({ title, href }) => (
            <li>
              <a
                href={href}
                aria-current={isCurrentPage(href) ? 'page' : false}
              >
                {title}
              </a>
            </li>
          ))
        }
      </ol>
    </nav>

    <button id="themebtn" class="subtle icon" style="display: none;">
      <span class="sr-only">toggle theme panel</span>
      <Sprite name="sun" size={24} />
      <Sprite name="moon" size={24} />
    </button>

    <label for="menubtn" class="button subtle icon">
      <span class="sr-only">Toggle navigation menu</span>
      <div class="menubtn__icon">
        <span></span>
        <span></span>
        <span></span>
      </div>
    </label>
  </div>
</header>

<script>
  const themeToggle = document.getElementById('themebtn')

  if (themeToggle) {
    themeToggle.addEventListener('click', function () {
      const isDark =
        document.documentElement.getAttribute('data-chisel-theme') === 'dark'
      const theme = isDark ? 'light' : 'dark'
      document.documentElement.setAttribute('data-chisel-theme', theme)
      localStorage.setItem(THEME_KEY, theme)
    })
    themeToggle.style.display = 'flex'
  }

  let lastScroll = 0
  const header = document.querySelector('header[role=banner]')
  function handleScroll() {
    window.pageYOffset > 50 && window.pageYOffset > lastScroll
      ? header!.classList.add('hidden')
      : header!.classList.remove('hidden')
    lastScroll = window.pageYOffset
  }
  if (header) {
    window.addEventListener('scroll', handleScroll)
  }
</script>

<style is:global lang="scss">
  [data-chisel-theme='light'] svg[astro-icon='sun'] {
    display: none;
  }

  [data-chisel-theme='dark'] svg[astro-icon='moon'] {
    display: none;
  }
</style><style lang="scss">
  header {
    --container-gap: var(--spacer-sm) !important;
    background: var(--chisel-neutral-100);
    filter: drop-shadow(0px 2px 4px #00000080);
    position: sticky;
    top: 0;
    z-index: 100;
    will-change: transform;
    transition: transform 150ms ease-in-out;
  }

  header.hidden {
    transform: translate(0, -100%);
  }

  .header {
    display: grid;
    grid-template-columns: auto 1fr auto auto;
    grid-template-areas: 'brand . theme menu' 'nav nav nav nav';
    column-gap: var(--spacer-sm);
    align-items: center;
  }

  a {
    text-decoration: none;
    color: inherit;
  }

  .header > a {
    grid-area: brand;
    display: flex;
    align-items: center;
    font-weight: 700;
  }

  [rel='home'] svg {
    height: 3rem;
    width: 3rem;
    margin-right: var(--spacer-xs);
  }

  ol {
    list-style: none;
    display: flex;
    counter-reset: menu;
    justify-content: space-between;
    margin: var(--spacer-sm) 0 var(--spacer-xs);

    li {
      counter-increment: menu;

      & a::before {
        content: '0' counter(menu);
        font-weight: bold;
        margin-right: var(--spacer-tiny);
      }
    }
  }

  nav {
    grid-area: nav;
    display: none;
  }

  nav a {
    padding: var(--spacer-sm) 0;
    position: relative;

    &::after {
      content: '';
      display: block;
      height: 3px;
      position: absolute;
      left: 0;
      right: 0;
      bottom: 3px;
      transform: scale(0);
      transform-origin: 0 50%;
      transition: transform 0.3s cubic-bezier(0.86, 0, 0.07, 1);
    }

    &[aria-current='page']::after {
      transform: scale(1);
      background: var(--chisel-secondary);
    }

    &:not([aria-current='page']):hover::after {
      transform: scale(1);
      background: var(--chisel-neutral-300);
    }
  }

  button {
    grid-area: theme;
  }

  label[for='menubtn'] {
    grid-area: menu;
    margin: 0;

    & .menubtn__icon {
      display: flex;
      flex-direction: column;
      width: 24px;
      cursor: pointer;
      margin: 0;
    }

    & span:not(.sr-only) {
      background-color: currentColor;
      border-radius: 5px;
      height: 3px;
      margin: 3px 0;
      transition: transform 0.4s cubic-bezier(0.68, -0.6, 0.32, 1.6),
        background-color 150ms;

      &:nth-of-type(1) {
        width: 50%;
      }

      &:nth-of-type(2) {
        width: 100%;
      }

      &:nth-of-type(3) {
        width: 75%;
      }
    }
  }

  #menubtn:focus-visible ~ label[for='menubtn'] {
    outline: 3px solid var(--chisel-secondary);
  }

  #menubtn:checked ~ label[for='menubtn'] {
    & span:nth-of-type(1) {
      transform-origin: bottom;
      transform: rotatez(45deg) translate(4px, 1.5px);
    }

    & span:nth-of-type(2) {
      transform-origin: top;
      transform: rotatez(-45deg);
    }

    & span:nth-of-type(3) {
      transform-origin: bottom;
      width: 50%;
      transform: translate(10.5px, -6px) rotatez(45deg);
    }
  }

  #menubtn:checked ~ nav {
    display: initial;
  }

  @media screen and (min-width: 640px) {
    ol {
      justify-content: flex-end;

      & li a::before {
        margin-right: var(--spacer-xs);
      }
    }

    li:not(:last-child) {
      margin-right: calc(2 * var(--spacer-sm));
    }
  }

  @media screen and (min-width: 939px) {
    .header {
      grid-template-areas: 'brand . nav theme';
    }

    nav {
      display: initial;

      & a {
        margin-right: var(--spacer-sm);
      }
    }

    ol {
      margin: var(--spacer-sm) 0;
    }

    li {
      margin-right: var(--spacer-sm);
    }

    label[for='menubtn'],
    #menubtn {
      display: none !important;
    }
  }
</style>

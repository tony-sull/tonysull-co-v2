---
import { Markdown } from 'astro-remote'
import { unescape } from 'html-escaper'
import CodeBlock from '@components/CodeBlock.astro'
import Show from '@components/Show.astro'
import Layout from '@layouts/Base.astro'
import { fetchArticles } from '@utils/api.js'
import { isoDate, shortDate } from '@utils/dates.js'
import { getDomain } from '@utils/links.js'
import {
  getAllMentions,
  isForUrl,
  sortMentions,
} from '@utils/mentions.js'
import { identifierToSlug } from '@utils/slugs.js'
import type { Article, Person } from 'schema-dts'
import WebMentions from '@components/WebMentions.astro'

export async function getStaticPaths() {
  const allArticles = await fetchArticles('articles')

  return allArticles.map(article => ({
    params: { slug: identifierToSlug(article.identifier!.toString()) },
    props: { article },
  }))
}

interface Props {
  article: Article
}

const { article } = Astro.props

const url = new URL(Astro.url.pathname, Astro.site).toString()

const allMentions = await getAllMentions()
const webMentions = allMentions.children
  .filter(isForUrl(url))
  .sort(sortMentions(true))

const {
  name,
  description,
  keywords,
  image,
  sameAs,
  datePublished,
  dateModified,
} = article

const author = article.author as Person | undefined

const publishedDateISO = datePublished && isoDate(datePublished.toString())
const publishedDate = datePublished && shortDate(datePublished.toString())
const modifiedDateISO = dateModified && isoDate(dateModified.toString())
const modifiedDate = dateModified && shortDate(dateModified.toString())
const canonicalDomain = sameAs && getDomain(sameAs.toString())

const category = keywords?.toString() || 'code'
---

<Layout
  prose
  title={name?.toString()}
  description={description?.toString()}
  image={image?.toString()}
  pathname={Astro.url.pathname}
>
  <section class="h-entry">
    <header>
      <em>{category}</em>
      <h1 class="p-name">{name}</h1>

      <small>
        <time class="dt-published" datetime={publishedDateISO}
          >{publishedDate}</time
        >
        <Show when={!!sameAs}>
          <i>
            â€¢ Originally published at{' '}
            <a href={sameAs?.toString()}>{canonicalDomain}</a>
          </i>
        </Show>
        {author && (
          <b class="h-card p-author">
            {typeof author === 'string' ? (
              <p class="u-name">{author}</p>
            ) : (
              <a class="u-url" href={author.url?.toString()}>{author.url}</a>
              <p class="u-name">{author.name}</p>
            )}
          </b>
        )}
      </small>

      <Show when={modifiedDate}>
        <small>
          <time class="dt-updated" datetime={modifiedDateISO}>
            <i>Updated: {modifiedDate}</i>
          </time>
        </small>
      </Show>

      <blockquote class="h5">
        <p class="p-summary lead">{description}</p>
      </blockquote>
    </header>
  </section>

  <article class="e-content markdown">
    <Markdown content={unescape(article.articleBody?.toString() || '')} components={{ CodeBlock }} />
  </article>

  <section>
    <WebMentions webMentions={webMentions} url={url} />
  </section>
</Layout>

<style lang="scss">
  header {
    margin-bottom: var(--spacer-md);

    & em {
      font-style: normal;
      text-transform: uppercase;
      color: var(--chisel-secondary);
      font-weight: 700;
      margin-bottom: var(--spacer-sm);
      display: block;
    }

    & small {
      display: block;
      margin-top: var(--spacer-tiny);
    }

    & .p-author {
      display: none;
    }

    & h1 {
      margin: 0 0 0.5em;
      font-size: var(--chisel-h2);

      @media (min-width: 640px) {
        & {
          font-size: var(--chisel-h2);
        }
      }
    }

    & blockquote {
      color: var(--chisel-neutral-700);
      font-weight: 400;
      line-height: 1.3;
      margin: var(--spacer-md) 0 0;
    }
  }

  article {
    & :global(h2) {
      font-size: var(--chisel-h3);
    }

    & :global(h3) {
      font-size: var(--chisel-h4);
    }

    & :global(h4) {
      font-size: var(--chisel-h5);
    }

    & :global(img) {
      display: block;
      margin: 0 auto;
      border-radius: 0.5rem;
      filter: drop-shadow(var(--drop-shadow));
    }
  }
</style>
